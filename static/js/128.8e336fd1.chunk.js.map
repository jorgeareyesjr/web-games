{"version":3,"file":"static/js/128.8e336fd1.chunk.js","mappings":"gLAMaA,GAAuBC,EAAAA,EAAAA,KAHf,SAACC,GAAe,OAAKA,EAAMC,IAAIC,GAAGC,SAAU,IAKhE,SAACF,GAAG,OAAKA,CAAG,IAGAG,GAA4BL,EAAAA,EAAAA,KAPf,SAACC,GAAU,OAAKA,EAAMC,IAAII,KAAKC,cAAe,IASvE,SAACA,GAAc,OAAKA,CAAc,G,uJCSpB,SAASC,EAAsB,GAA6B,IAA3BC,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAClDC,GAAWC,EAAAA,EAAAA,MAEXC,GAAmBC,EAAAA,EAAAA,MAGnBC,GAAoBC,EAAAA,EAAAA,IAAYC,EAAAA,IAChCC,GAAeF,EAAAA,EAAAA,IAAYG,EAAAA,IAC3BC,GAAyBC,EAAAA,EAAAA,IAAiBZ,GAG1CL,GAAYY,EAAAA,EAAAA,IAAYjB,EAAAA,IAG9BuB,EAAAA,EAAAA,YAAU,WACT,IAAIC,GAAkB,EAEhBC,EAAqB,WAAH,OAASb,GAASc,EAAAA,EAAAA,GAAgBL,GAAgB,EAc1E,OAJKG,GAAoBL,IACvBL,EATuB,WACxB,IAAQK,EAAiBL,EAAjBK,aACFQ,EAAmBX,EAAkBG,GACnCQ,EAELf,GAASc,EAAAA,EAAAA,GAAgBC,IADzBF,GAEJ,CAG4CG,GAAvBH,KAGd,WACND,GAAkB,CACnB,CACD,GAAG,CAACZ,EAAUI,EAAmBG,EAAcE,EAAeP,IAe9D,OAAKK,GAKJ,gBAAKU,UAViC,UAJf,YAClBV,GAAgBA,EAAaW,MAIX,YATKzB,EAAS,uCAkBe,SACjDM,KALI,SAAC,IAAO,CAACoB,QAAO,6BAQzB,C","sources":["app/_redux/nav/selectors.ts","app/wrappers/LayoutSettingsWrapper.tsx"],"sourcesContent":["import { createSelector } from 'reselect';\nimport { AppState } from '../rootReducer';\n\nconst getNavIsOpen = (state: AppState) => state.nav.ui.navIsOpen;\nconst getNavDisplaySize = (state: any) => state.nav.data.navDisplaySize;\n\nexport const getNavIsOpenSelector = createSelector(\n\tgetNavIsOpen,\n\t(nav) => nav,\n);\n\nexport const getNavDisplaySizeSelector = createSelector(\n\tgetNavDisplaySize,\n\t(navDisplaySize) => navDisplaySize,\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n/* Redux */\nimport { ILayout } from '../_redux/layout/types';\nimport {\n\tgetActiveLayoutSelector,\n\tgetRegisteredLayoutsSelector,\n} from '../_redux/layout/selectors';\nimport { setActiveLayout } from '../_redux/layout/operations';\nimport { getNavIsOpenSelector } from '../_redux/nav/selectors';\n\n/* Services */\nimport {\n\tgetSavedAppSettings,\n\tgetDefaultLayout,\n} from '../services/ManageAppData';\n\n/* Components */\nimport Spinner from '../components/Spinner';\n\n// The redux-saga middleware will automatically synchronize and keep all of the browser's localStorage data up-to-date.\nexport default function LayoutSettingsWrapper({ layouts, children }: any) {\n\tconst dispatch = useDispatch();\n\n\tconst savedAppSettings = getSavedAppSettings();\n\n\t// Layout.\n\tconst registeredLayouts = useSelector(getRegisteredLayoutsSelector);\n\tconst activeLayout = useSelector(getActiveLayoutSelector);\n\tconst defaultLayout: ILayout = getDefaultLayout(layouts);\n\n\t// Nav.\n\tconst navIsOpen = useSelector(getNavIsOpenSelector);\n\n\t// Effect to manage the app's active layout.\n\tuseEffect(() => {\n\t\tlet effectCancelled = false;\n\n\t\tconst applyDefaultLayout = () => dispatch(setActiveLayout(defaultLayout));\n\n\t\tconst checkSavedLayout = () => {\n\t\t\tconst { activeLayout } = savedAppSettings;\n\t\t\tconst registeredLayout = registeredLayouts[activeLayout];\n\t\t\treturn !registeredLayout\n\t\t\t\t? applyDefaultLayout()\n\t\t\t\t: dispatch(setActiveLayout(registeredLayout))\n\t\t};\n\n\t\tif (!effectCancelled && !activeLayout) {\n\t\t\t!savedAppSettings ? applyDefaultLayout() : checkSavedLayout();\n\t\t};\n\n\t\treturn () => {\n\t\t\teffectCancelled = false;\n\t\t};\n\t}, [dispatch, registeredLayouts, activeLayout, defaultLayout, savedAppSettings]);\n\n\tconst menuOpenState = () => !navIsOpen\n\t\t? `l-menu--is-closed`\n\t\t: `l-menu--is-open`;\n\n\tconst setLayoutClassName = () => (\n\t\t`l-${activeLayout && activeLayout.name}`\n\t);\n\n\tconst setLayoutSettingsWrapperClassName = () => (\n\t\t`${setLayoutClassName()} ${menuOpenState()}`\n\t);\n\n\t/* Views */\n\tif (!activeLayout) {\n\t\treturn <Spinner message={`Formatting Layout Base...`} />;\n\t};\n\n\treturn (\n\t\t<div className={setLayoutSettingsWrapperClassName()}>\n\t\t\t{ children }\n\t\t</div>\n\t);\n};\n"],"names":["getNavIsOpenSelector","createSelector","state","nav","ui","navIsOpen","getNavDisplaySizeSelector","data","navDisplaySize","LayoutSettingsWrapper","layouts","children","dispatch","useDispatch","savedAppSettings","getSavedAppSettings","registeredLayouts","useSelector","getRegisteredLayoutsSelector","activeLayout","getActiveLayoutSelector","defaultLayout","getDefaultLayout","useEffect","effectCancelled","applyDefaultLayout","setActiveLayout","registeredLayout","checkSavedLayout","className","name","message"],"sourceRoot":""}