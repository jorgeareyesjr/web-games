{"version":3,"file":"static/js/335.0cd857e4.chunk.js","mappings":"gOAqBe,SAASA,EAAqB,GAA4B,IAA1BC,EAAM,EAANA,OAAQC,EAAQ,EAARA,SAChDC,GAAWC,EAAAA,EAAAA,MAGXC,GAAmBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC/BC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1BC,GAAuBC,EAAAA,EAAAA,IAAgBV,IAG7CW,EAAAA,EAAAA,YAAU,WACT,IAAIC,GAAkB,EAEhBC,GAAmBC,EAAAA,EAAAA,MAgBzB,OAJKF,GAAoBL,IACvBM,EATsB,WACvB,IAAQN,EAAgBM,EAAhBN,YACFQ,EAAkBX,EAAiBG,GAGtCL,EAFKa,GAEIC,EAAAA,EAAAA,GAAeD,IADfC,EAAAA,EAAAA,GAAeP,GAE5B,CAG2CQ,GAXXf,GAASc,EAAAA,EAAAA,GAAeP,KAcjD,WACNG,GAAkB,CACnB,CACD,GAAG,CACFV,EACAE,EACAG,EACAE,IASD,OAAKF,GAKJ,gBAAKW,UAVgC,YAChCX,IAA0B,OAAXA,QAAW,IAAXA,OAAW,EAAXA,EAAaY,OASkB,SACjDlB,KALK,SAAC,IAAO,CAACmB,QAAO,2BAQzB,C","sources":["app/wrappers/ThemeSettingsWrapper.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n/* Redux */\nimport { ITheme } from '../_redux/theme/types';\nimport {\n\tgetActiveThemeSelector,\n\tgetRegisteredThemesSelector,\n} from '../_redux/theme/selectors';\nimport { setActiveTheme } from '../_redux/theme/operations';\n\n/* Services */\nimport {\n\tgetDefaultTheme,\n\tgetSavedAppSettings,\n} from '../services/ManageAppData';\n\n/* Components */\nimport Spinner from '../components/Spinner';\n\n// The redux-saga middleware will automatically synchronize and keep all of the browser's localStorage data up-to-date.\nexport default function ThemeSettingsWrapper({ themes, children }: any) {\n\tconst dispatch = useDispatch();\n\n\t// Theme.\n\tconst registeredThemes = useSelector(getRegisteredThemesSelector);\n\tconst activeTheme = useSelector(getActiveThemeSelector);\n\tconst defaultTheme: ITheme = getDefaultTheme(themes);\n\n\t// Effect to manage the app's active theme.\n\tuseEffect(() => {\n\t\tlet effectCancelled = false;\n\n\t\tconst savedAppSettings = getSavedAppSettings();\n\n\t\tconst applyDefaultTheme = () => dispatch(setActiveTheme(defaultTheme));\n\n\t\tconst checkSavedTheme = () => {\n\t\t\tconst { activeTheme } = savedAppSettings;\n\t\t\tconst registeredTheme = registeredThemes[activeTheme];\n\t\t\treturn !registeredTheme\n\t\t\t\t? dispatch(setActiveTheme(defaultTheme))\n\t\t\t\t: dispatch(setActiveTheme(registeredTheme));\n\t\t};\n\n\t\tif (!effectCancelled && !activeTheme) {\n\t\t\t!savedAppSettings ? applyDefaultTheme() : checkSavedTheme();\n\t\t};\n\n\t\treturn () => {\n\t\t\teffectCancelled = false;\n\t\t};\n\t}, [\n\t\tdispatch,\n\t\tregisteredThemes,\n\t\tactiveTheme,\n\t\tdefaultTheme,\n\t]);\n\n\t// Set classnames.\n\tconst setThemeSettingsWrapperClassName = () => (\n\t\t`t-${activeTheme && activeTheme?.name}`\n\t);\n\n\t/* Views */\n\tif (!activeTheme) {\n\t\treturn <Spinner message={`Setting Theme Styles...`} />;\n\t};\n\n\treturn (\n\t\t<div className={setThemeSettingsWrapperClassName()}>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n"],"names":["ThemeSettingsWrapper","themes","children","dispatch","useDispatch","registeredThemes","useSelector","getRegisteredThemesSelector","activeTheme","getActiveThemeSelector","defaultTheme","getDefaultTheme","useEffect","effectCancelled","savedAppSettings","getSavedAppSettings","registeredTheme","setActiveTheme","checkSavedTheme","className","name","message"],"sourceRoot":""}